#!/bin/bash
# howold -- given a date in the form month/day/year, calculate how old
#     are you in years, months and days.

# If you are on Linux, this should only be 'which date'
# If you are on OS X, install coreutils with brew or from source for gdate
date="`which date`"  

function daysInMonth
{
  case $1 in
    1|3|5|7|8|10|12 ) dim=31 ;; # most common value
    4|6|9|11        ) dim=30 ;;
    2               ) dim=29 ;;  # depending on if it's a leap year
    *               ) dim=-1 ;;  # unknown month
  esac
}

function isleap
{
  # returns non-zero value for $leapyear if $1 was a leap year 
    leapyear=$($date -d 12/31/$1 +%j | grep 366)
}

#######################
#### MAIN BLOCK

if [ $# -ne 3 ] ; then
  echo "Usage: $(basename $0) month day year"
  echo "  with just numerical values (ex: 7 7 1776)"
  exit 1
fi

$date --version > /dev/null 2>&1         # discard error, if any

if [ $? -ne 0 ] ; then
  echo "Sorry, but $(basename $0) can't run without GNU date." >&2 ; exit 1
fi

eval $($date "+thismon=%m;thisday=%d;thisyear=%Y;dayofyear=%j")

startmon=$1; startday=$2; startyear=$3

daysInMonth $startmon # sets global var dim

if [ $startday -lt 0 -o $startday -gt $dim ] ; then
  echo "Invalid: Month #$startmon only has $dim days." >&2 ; exit 1
fi

if [ $startmon -eq 2 -a $startday -eq 29 ] ; then
  isleap $startyear
  if [ -z "$leapyear" ] ; then
    echo "$startyear wasn't a leapyear, so February only had 28 days." >&2
    exit 1
  fi
fi

### SET UTILITY VARS
dayofyear=$($date +%j) # that's easy!
dayofbirthday=$($date --date="$startyear-$startmon-$startday" +%j)

## In order to perform arithmetic with 0-prefixed numbers (e.g. 09, $thismon)
## you need to tell bash to use base-10 by specifying 10#

### FIRST, NUMBER OF YEARS
if [ $dayofyear -lt $dayofbirthday ] ; then
  numberOfYears=$(( 10#$thisyear - $startyear -1 ))
  flag=1  # will be useful for calculate number of months
else
  numberOfYears=$(( 10#$thisyear - $startyear ))
  flag=0
fi

### SECOND, NUMBER OF MONTHS
if [ $flag -eq 1 ] ; then
  numberOfMonths=$(( 12 - $startmon + 10#$thismon ))
  if [ $thisday -lt $startday ] ; then
    numberOfMonths=$(( $numberOfMonths - 1 ))
  fi
else
  if [ $thisday -lt $startday ] ; then
    numberOfMonths=$(( 10#$thismon - $startmon - 1 ))
  else
    numberOfMonths=$(( 10#$thismon - $startmon ))
  fi
fi

### THIRD, NUMBER OF DAYS
if [ $thisday -gt $startday -o $thisday -eq $startday ] ; then
  numberOfDays=$(( 10#$thisday - $startday ))
else
  daysInMonth $(( 10#$thismon - 1 ))  # override dim...
  extraDays=$(( $dim - $startday ))  # to check the remaining days in the month of birth
  numberOfDays=$(( 10#$thisday + $extraDays ))
fi

### NOW ADD IT ALL UP
echo "You are $numberOfYears years, $numberOfMonths months, and $numberOfDays days old"
exit 0
